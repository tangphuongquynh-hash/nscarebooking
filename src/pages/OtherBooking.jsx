import React, { useEffect, useState } from "react";

export default function OtherBooking({ user }) {
  const [form, setForm] = useState({
    service: "",
    quantity: 1,
    size: "",
    date: "",
    time: "",
    address: "",
    note: "",
    image: null,
    name: "",
    phone: "",
  });

  const [submittedInfo, setSubmittedInfo] = useState(null);
  const [error, setError] = useState("");

  // üß© Load l·∫°i d·ªØ li·ªáu c≈© ho·∫∑c t·ª´ Zalo
  useEffect(() => {
    const saved = localStorage.getItem("otherBookingForm");
    if (saved) {
      setForm(JSON.parse(saved));
    } else if (user) {
      setForm((prev) => ({
        ...prev,
        name: user.name || "",
        phone: user.phone || "",
      }));
    }
  }, [user]);

  // üíæ L∆∞u form m·ªói khi thay ƒë·ªïi
  useEffect(() => {
    localStorage.setItem("otherBookingForm", JSON.stringify(form));
  }, [form]);

  // ‚úèÔ∏è Handle change
  const handleChange = (e) => {
    const { name, value, files } = e.target;
    setForm((prev) => ({
      ...prev,
      [name]: files ? files[0] : value,
    }));
  };

  // üöÄ Submit form
  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      const bodyData = { ...form, serviceType: "Other Booking" };
      const res = await fetch("https://api.nscare.vn/api/bookings", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(bodyData),
      });

      if (!res.ok) throw new Error("Kh√¥ng th·ªÉ g·ª≠i l·ªãch h·∫πn");
      const data = await res.json();
      console.log("‚úÖ Booking created:", data);

      // üßæ Hi·ªán popup t√≥m t·∫Øt
      setSubmittedInfo({
        name: form.name,
        phone: form.phone,
        service: form.service,
        date: form.date,
        time: form.time,
        address: form.address,
      });

      // üßπ Reset nh·∫π (ƒë·ªÉ ng∆∞·ªùi d√πng nh·∫≠p l·∫°i d·ªÖ)
      const updated = {
        ...form,
        date: "",
        time: "",
        note: "",
        image: null,
      };
      setForm(updated);
      localStorage.setItem("otherBookingForm", JSON.stringify(updated));
      setError("");
    } catch (err) {
      console.error("‚ùå", err);
      setError("Kh√¥ng th·ªÉ g·ª≠i l·ªãch, vui l√≤ng th·ª≠ l·∫°i!");
    }
  };

  return (
    <div className="relative min-h-screen bg-gradient-to-b from-[#dff4f3] to-[#f5f9f9] p-4 pb-24">
      <h1 className="text-xl font-bold text-teal-700 text-center mb-6">
        ƒê·∫∑t d·ªãch v·ª• kh√°c | Other Services Booking
      </h1>

      <form
        onSubmit={handleSubmit}
        className="bg-white rounded-xl shadow-md p-6 space-y-4"
      >
        {/* üßç Name & Phone (t·ª± ƒëi·ªÅn t·ª´ Zalo n·∫øu c√≥) */}
        <div>
          <label className="block text-sm font-medium text-teal-700 mb-1">
            T√™n kh√°ch h√†ng | Name
          </label>
          <input
            type="text"
            name="name"
            value={form.name}
            onChange={handleChange}
            placeholder="Nguy·ªÖn VƒÉn A"
            className="w-full border border-gray-300 rounded-lg p-2"
            required
          />
        </div>
        <div>
          <label className="block text-sm font-medium text-teal-700 mb-1">
            S·ªë ƒëi·ªán tho·∫°i | Phone
          </label>
          <input
            type="tel"
            name="phone"
            value={form.phone}
            onChange={handleChange}
            placeholder="090xxxxxxx"
            className="w-full border border-gray-300 rounded-lg p-2"
            required
          />
        </div>

        {/* üßπ Service */}
        <div>
          <label className="block text-sm font-medium text-teal-700 mb-1">
            Ch·ªçn d·ªãch v·ª• | Select Service
          </label>
          <select
            name="service"
            value={form.service}
            onChange={handleChange}
            className="w-full border border-gray-300 rounded-lg p-2"
            required
          >
            <option value="">-- Ch·ªçn d·ªãch v·ª• --</option>
            <option value="industrial">V·ªá sinh c√¥ng nghi·ªáp | Industrial Cleaning</option>
            <option value="curtain">Gi·∫∑t r√®m | Curtain Cleaning</option>
            <option value="mattress">Gi·∫∑t n·ªám | Mattress Cleaning</option>
            <option value="carpet">Gi·∫∑t th·∫£m | Carpet Cleaning</option>
            <option value="sofa">Gi·∫∑t gh·∫ø sofa | Sofa Cleaning</option>
            <option value="washing-machine">V·ªá sinh m√°y gi·∫∑t | Washing Machine Cleaning</option>
            <option value="aircon">V·ªá sinh m√°y l·∫°nh | Air Conditioner Cleaning</option>
          </select>
        </div>

        {/* Quantity */}
        <div>
          <label className="block text-sm font-medium text-teal-700 mb-1">
            S·ªë l∆∞·ª£ng | Quantity
          </label>
          <input
            type="number"
            name="quantity"
            min="1"
            value={form.quantity}
            onChange={handleChange}
            className="w-full border border-gray-300 rounded-lg p-2"
            required
          />
        </div>

        {/* Size */}
        <div>
          <label className="block text-sm font-medium text-teal-700 mb-1">
            K√≠ch th∆∞·ªõc (n·∫øu c√≥) | Size
          </label>
          <input
            type="text"
            name="size"
            value={form.size}
            onChange={handleChange}
            placeholder="V√≠ d·ª•: 2x3m, 5 chi·∫øc, ..."
            className="w-full border border-gray-300 rounded-lg p-2"
          />
        </div>

        {/* Upload image */}
        <div>
          <label className="block text-sm font-medium text-teal-700 mb-1">
            H√¨nh ·∫£nh th·ª±c t·∫ø | Upload Image
          </label>
          <input
            type="file"
            accept="image/*"
            name="image"
            onChange={handleChange}
            className="w-full text-sm"
          />
        </div>

        {/* Date & Time */}
        <div className="grid grid-cols-2 gap-4">
          <div>
            <label className="block text-sm font-medium text-teal-700 mb-1">
              Ng√†y th·ª±c hi·ªán | Date
            </label>
            <input
              type="date"
              name="date"
              value={form.date}
              onChange={handleChange}
              className="w-full border border-gray-300 rounded-lg p-2"
              required
            />
          </div>
          <div>
            <label className="block text-sm font-medium text-teal-700 mb-1">
              Gi·ªù th·ª±c hi·ªán | Time
            </label>
            <input
              type="time"
              name="time"
              value={form.time}
              onChange={handleChange}
              className="w-full border border-gray-300 rounded-lg p-2"
              required
            />
          </div>
        </div>

        {/* Address */}
        <div>
          <label className="block text-sm font-medium text-teal-700 mb-1">
            ƒê·ªãa ch·ªâ | Address
          </label>
          <input
            type="text"
            name="address"
            value={form.address}
            onChange={handleChange}
            placeholder="S·ªë nh√†, ƒë∆∞·ªùng, qu·∫≠n, TP..."
            className="w-full border border-gray-300 rounded-lg p-2"
            required
          />
        </div>

        {/* Note */}
        <div>
          <label className="block text-sm font-medium text-teal-700 mb-1">
            Ghi ch√∫ | Note
          </label>
          <textarea
            name="note"
            value={form.note}
            onChange={handleChange}
            placeholder="Y√™u c·∫ßu th√™m..."
            className="w-full border border-gray-300 rounded-lg p-2 h-20 resize-none"
          />
        </div>

        <div className="bg-teal-50 p-3 rounded-lg border border-teal-200">
          <p className="text-sm text-gray-600">
            üí° Gi√° d·ªãch v·ª• s·∫Ω ƒë∆∞·ª£c b√°o sau khi nh√¢n vi√™n t∆∞ v·∫•n.
          </p>
          <p className="text-xs text-gray-400 mt-1">
            ·∫¢nh gi√∫p nh√¢n vi√™n ƒë√°nh gi√° nhanh h∆°n.
          </p>
        </div>

        {error && <div className="text-sm text-red-500">{error}</div>}

        <button
          type="submit"
          className="w-full py-2 rounded-lg font-semibold text-white shadow-md bg-gradient-to-r from-teal-400 to-teal-500 hover:opacity-95"
        >
          X√°c nh·∫≠n ƒë·∫∑t d·ªãch v·ª•
        </button>
      </form>

      {/* üéâ POP-UP t√≥m t·∫Øt */}
      {submittedInfo && (
        <div className="fixed inset-0 bg-black bg-opacity-40 flex items-center justify-center z-50">
          <div className="bg-gradient-to-r from-green-100 to-teal-50 rounded-2xl shadow-xl p-6 w-80 animate-fadeIn">
            <h3 className="font-bold text-lg text-teal-700 mb-3 text-center">
              üéâ ƒê·∫∑t l·ªãch th√†nh c√¥ng!
            </h3>
            <div className="text-gray-700 text-sm space-y-1">
              <p><b>{submittedInfo.name}</b> ({submittedInfo.phone})</p>
              <p>üì¶ {submittedInfo.service}</p>
              <p>üìÖ {submittedInfo.date} ‚Äî ‚è∞ {submittedInfo.time}</p>
              <p>üè† {submittedInfo.address}</p>
            </div>
            <p className="text-xs text-gray-500 mt-3 text-center">
              Admin s·∫Ω s·ªõm li√™n h·ªá ƒë·ªÉ x√°c nh·∫≠n üí¨
            </p>
            <button
              onClick={() => setSubmittedInfo(null)}
              className="mt-4 w-full bg-gradient-to-r from-teal-400 to-teal-500 text-white font-semibold py-2 rounded-lg shadow hover:opacity-90"
            >
              ƒê√≥ng
            </button>
          </div>
        </div>
      )}
    </div>
  );
}